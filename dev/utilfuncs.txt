First, here is a set of utility functions.

Imports Microsoft.VisualBasic
Imports System.Data
Imports System.Data.SqlClient
Imports System.Xml
Imports System.Enum
Imports System.Net
Imports System.Net.Mail
Imports System.IO
Imports Newtonsoft.Json
Imports Newtonsoft.Json.Linq

Public Class AdvisingShared
    Inherits System.Web.UI.Page

    <FlagsAttribute()> _
    Public Enum APCourses As Integer
        Default_Curriculum = 1
        MATH_101 = 2
    End Enum
    Public Enum TestSystem
        test = 0    'set to 0 for normal production, 1 to divert
SchedulePlanner to test system
    End Enum

    Public Const TestRedirect As String = "~/Maintenance.aspx"

    Public Shared Function AddUserID(UserName As String) As Integer
        Dim DS As New DataSet()
        Dim Adpt As New SqlDataAdapter()
        Dim ConnStr As String =
System.Configuration.ConfigurationManager.ConnectionStrings("COMP446_Connect
ionString").ConnectionString
        Dim strSQL As StringBuilder
        strSQL = New StringBuilder()
        strSQL.Append("SELECT *")
        strSQL.Append(" FROM dbo.Registration_Users")
        strSQL.Append(" WHERE UserName=N'")
        strSQL.Append(UserName)
        strSQL.Append("'")
        Dim Conn As New SqlConnection(ConnStr)
        Adpt.SelectCommand = New SqlCommand(strSQL.ToString(), Conn)
        Dim CB As New SqlCommandBuilder(Adpt)
        Try
            Adpt.Fill(DS)
            If DS.Tables(0).Rows.Count > 0 Then Return
DS.Tables(0).Rows(0).Item("UserID") 'User already exists
            Dim NewRow As DataRow
            NewRow = DS.Tables(0).NewRow
            NewRow.Item("UserName") = UserName
            NewRow.Item("Authenticated") = 0
            NewRow.Item("DateCreated") = Now()
            NewRow.Item("DateAuthenticated") = DBNull.Value
            DS.Tables(0).Rows.Add(NewRow)
            Adpt.Update(DS)
            'Adpt.Dispose()
            'Conn.Close()
            ' Next section not clean, there may be a better way
            Dim UserDS As DataSet
            Dim AUQuery As New SqlCommand("SELECT * from
dbo.Registration_Users WHERE UserName=@UserName")
            AUQuery.Parameters.Add("@UserName", SqlDbType.NVarChar, 100)
            AUQuery.Parameters("@UserName").Value = UserName
            UserDS = RunQuery(AUQuery)
            If UserDS.Tables.Count = 0 Then Return -1
            Return UserDS.Tables(0).Rows(0).Item("UserID")

        Catch e As Exception
            Return -1
        End Try
    End Function
    Public Shared Function CourseNameFromCRN(CRN As Integer, Term_Code As
Integer) As String
        Dim command As New SqlCommand("Select subject, course_number,
section FROM dbo.Registration_Courses where (crn = @crn) and (Term_Code
=@Term_Code)")
        command.Parameters.AddWithValue("@crn", CRN)
        command.Parameters.AddWithValue("@Term_Code", Term_Code)
        Dim DS As DataSet = RunQuery(command)
        If DS.Tables(0).Rows.Count = 0 Then Return ""
        Return DS.Tables(0).Rows(0).Item("subject") + " " +
DS.Tables(0).Rows(0).Item("course_number") + " " +
DS.Tables(0).Rows(0).Item("section")
    End Function
    Public Shared Function CourseRestrictions(catalog_inst_permission As
String, catalog_or_permission As String, program_restrictions As String,
major_restrictions As String, class_restrictions As String,
level_restrictions As String) As String
        CourseRestrictions = ""
        If catalog_inst_permission <> "" Then CourseRestrictions =
CourseRestrictions + catalog_inst_permission + "<br />"
        If catalog_or_permission <> "" Then CourseRestrictions =
CourseRestrictions + catalog_or_permission + "<br />"
        If program_restrictions <> "" Then CourseRestrictions =
CourseRestrictions + program_restrictions + "<br />"
        If major_restrictions <> "" Then CourseRestrictions =
CourseRestrictions + major_restrictions + "<br />"
        If class_restrictions <> "" Then CourseRestrictions =
CourseRestrictions + class_restrictions + "<br />"
        If level_restrictions <> "" Then CourseRestrictions =
CourseRestrictions + level_restrictions + "<br />"
        If CourseRestrictions <> "" Then CourseRestrictions =
Left(CourseRestrictions, Len(CourseRestrictions) - 6)
    End Function
    Public Shared Function CourseTitleFromCRN(CRN As Integer, Term_Code As
Integer) As String
        Dim command As New SqlCommand("Select title FROM
dbo.Registration_Courses where (crn = @crn) and (Term_Code =@Term_Code)")
        command.Parameters.AddWithValue("@crn", CRN)
        command.Parameters.AddWithValue("@Term_Code", Term_Code)
        Dim DS As DataSet = RunQuery(command)
        If DS.Tables(0).Rows.Count = 0 Then Return ""
        Return DS.Tables(0).Rows(0).Item("title")
    End Function
    Public Shared Function DecodeTermCode(Term As Integer) As String
        Dim semester As String
        Dim year As Integer = Int(Term / 100)
        Select Case (Term - Int(Term / 100) * 100)
            Case 10
                semester = "Fall"
                year = year - 1 ' one year earlier if fall semester
            Case 20
                semester = "Spring"
            Case 30
                semester = "Summer"
            Case Else
                semester = "Other"
        End Select
        Return semester + " " + year.ToString()
        'Return semester + " '" + Right(year.ToString(), 2)
    End Function
    Public Shared Function ExtractTermCode(Term As String) As Integer
        If Term.Length < 9 Then Return 0
        Dim year As Integer = Val(Right(Term, 4)) * 100
        If year < 200000 Then Return 0
        Select Case LCase(Mid(Term, Term.Length - 6, 2))
            Case "ll"
                Return year + 100 + 10
            Case "ng"
                Return year + 20
            Case "er"
                Return year + 30
            Case Else
                Return -1
        End Select
    End Function
    Public Shared Function FullCourseInfo(CRN As Integer, Term As Integer)
As String
        Dim CourseListItemString As New StringBuilder
        CourseListItemString.Append(CRN.ToString)
        CourseListItemString.Append(" - ")
        Dim CourseNumber As String = CourseNameFromCRN(CRN, Term)
        CourseListItemString.Append(Left(CourseNumber, CourseNumber.Length -
4))
        CourseListItemString.Append(" - ")
        CourseListItemString.Append(CourseTitleFromCRN(CRN, Term))
        CourseListItemString.Append(" - ")
        CourseListItemString.Append(DecodeTermCode(Term))
        Return CourseListItemString.ToString
    End Function
    Public Shared Function Fullness(Cur As Integer, Max As Integer, xCur As
Integer, xMax As Integer) As System.Drawing.Color
        If (Max = 0) Or (xMax = 0) Then Return Drawing.Color.Orange 'don't
divide by 0
        If (Cur >= Max) Or (xCur >= xMax) Then Return Drawing.Color.Pink
        If Cur * 100 / Max >= 80 Then Return Drawing.Color.Yellow
        Return Drawing.Color.Transparent
    End Function
    Public Shared Function GetCurrentTermcode() As Integer
        Dim ddlSemesterDS As DataSet = GetDS("Select Term_Code from
dbo.Registration_Courses GROUP BY Term_Code Order By Term_Code Desc;")
        If ddlSemesterDS.Tables(0).Rows.Count = 0 Then Return -1
        Return ddlSemesterDS.Tables(0).Rows(0).Item("Term_Code")
    End Function
    Public Shared Function GetDS(ByVal strSelect As String) As DataSet
        'GetDS = New DataSet() 'Create a new DataSet to hold the records.
        Dim sqlQuery As New SqlCommand
        sqlQuery.CommandText = strSelect
        GetDS = RunQuery(sqlQuery)
    End Function 'Returns a DataSet from Query String
    Public Shared Function GetHtmlPage(ByVal strURL As String) As String
        Dim strResult As String
        Dim objResponse As WebResponse
        Dim objRequest As WebRequest = HttpWebRequest.Create(strURL)
        objResponse = objRequest.GetResponse()
        Using sr As New StreamReader(objResponse.GetResponseStream())
            strResult = sr.ReadToEnd()
            sr.Close()
        End Using
        Return strResult
    End Function
    Public Shared Function GetUserID(UserName As String) As Integer
        Dim UserDS As DataSet
        Dim AUQuery As New SqlCommand("SELECT * from dbo.Registration_Users
WHERE UserName=@UserName")
        UserName = LTrim(LCase(UserName))
        AUQuery.Parameters.Add("@UserName", SqlDbType.NVarChar, 100)
        AUQuery.Parameters("@UserName").Value = UserName
        UserDS = RunQuery(AUQuery)
        If UserDS.Tables(0).Rows.Count = 0 Then Return AddUserID(UserName) '
If does not exist, then create it
        Return UserDS.Tables(0).Rows(0).Item("UserID")
    End Function
    Public Shared Function Get_XlstCrnDs(crn As Integer, Term_Code As
Integer) As DataSet
        Get_XlstCrnDs = New DataSet()
        Get_XlstCrnDs.Tables.Add()
        Get_XlstCrnDs.Tables(0).Columns.Add("crn",
Type.GetType("System.Int32"))
        Dim XlstCrnDr As DataRow

        Dim command As New SqlCommand("Select xlst_group FROM
dbo.Registration_Courses where (crn = @crn) and (Term_Code =@Term_Code)")
        command.Parameters.AddWithValue("@crn", crn)
        command.Parameters.AddWithValue("@Term_Code", Term_Code)
        Dim DS As DataSet = RunQuery(command)
        If DS.Tables(0).Rows.Count = 0 Then Return Get_XlstCrnDs ' if CRN
not found, return empty dataset.

        If DS.Tables(0).Rows(0).Item("xlst_group") = "" Then
            XlstCrnDr = Get_XlstCrnDs.Tables(0).NewRow
            XlstCrnDr.Item(0) = crn
            Get_XlstCrnDs.Tables(0).Rows.Add(XlstCrnDr)
        Else
            Dim CRNcommand As New SqlCommand("Select crn FROM
dbo.Registration_Courses where (xlst_group = @xlst_group) and (Term_Code
=@Term_Code)")
            CRNcommand.Parameters.AddWithValue("@xlst_group",
DS.Tables(0).Rows(0).Item(0))
            CRNcommand.Parameters.AddWithValue("@Term_Code", Term_Code)
            Dim DS1 As DataSet = RunQuery(CRNcommand)
            For I = 0 To DS1.Tables(0).Rows.Count - 1
                XlstCrnDr = Get_XlstCrnDs.Tables(0).NewRow
                XlstCrnDr.Item(0) = DS1.Tables(0).Rows(I).Item("crn")
                Get_XlstCrnDs.Tables(0).Rows.Add(XlstCrnDr)
            Next
        End If
        Return Get_XlstCrnDs
    End Function 'Returns a dataset with the list of CRNs in the Xlist
group.
    Public Shared Function Get_XlstCrnInstructorEvalsDs(crn As Integer,
Term_Code As Integer) As DataSet
        Get_XlstCrnInstructorEvalsDs = New DataSet()
        Get_XlstCrnInstructorEvalsDs.Tables.Add()
        Get_XlstCrnInstructorEvalsDs.Tables(0).Columns.Add("crn",
Type.GetType("System.Int32"))
        Dim XlstCrnDr As DataRow

        Dim command As New SqlCommand("Select xlst_group FROM
dbo.Registration_Courses where (crn = @crn) and (Term_Code =@Term_Code)")
        command.Parameters.AddWithValue("@crn", crn)
        command.Parameters.AddWithValue("@Term_Code", Term_Code)
        Dim DS As DataSet = RunQuery(command)
        If DS.Tables(0).Rows.Count = 0 Then Return
Get_XlstCrnInstructorEvalsDs ' if CRN not found, return empty dataset.

        If DS.Tables(0).Rows(0).Item("xlst_group") = "" Then
            XlstCrnDr = Get_XlstCrnInstructorEvalsDs.Tables(0).NewRow
            XlstCrnDr.Item(0) = crn
            Get_XlstCrnInstructorEvalsDs.Tables(0).Rows.Add(XlstCrnDr)
        Else
            Dim CRNcommand As New SqlCommand("Select CRN FROM
dbo.Registration_InstructorEvals where ([XLIST GROUP] = @xlst_group) and
([TERM CODE] =@Term_Code) Group By CRN Order By CRN")
            CRNcommand.Parameters.AddWithValue("@xlst_group",
DS.Tables(0).Rows(0).Item(0))
            CRNcommand.Parameters.AddWithValue("@Term_Code", Term_Code)
            Dim DS1 As DataSet = RunQuery(CRNcommand)
            For I = 0 To DS1.Tables(0).Rows.Count - 1
                XlstCrnDr = Get_XlstCrnInstructorEvalsDs.Tables(0).NewRow
                XlstCrnDr.Item(0) = DS1.Tables(0).Rows(I).Item("crn")
                Get_XlstCrnInstructorEvalsDs.Tables(0).Rows.Add(XlstCrnDr)
            Next
        End If
        Return Get_XlstCrnInstructorEvalsDs
    End Function 'Returns a dataset with the list of CRNs in the Xlist
group.
    Public Shared Function Get_Xlst(ByVal xlst_group As String, ByVal crn As
Integer, ByVal Term_Code As Integer) As String
        If xlst_group = "" Then Return "" ' not Cross listed
        Dim command As New SqlCommand("Select subject, course_number FROM
dbo.Registration_Courses where (xlst_group=@xlst_group) and (crn <> @crn)
and (Term_Code =@Term_Code) GROUP BY subject, course_number Order by
subject, course_number")
        command.Parameters.AddWithValue("@xlst_group", xlst_group)
        command.Parameters.AddWithValue("@crn", crn)
        command.Parameters.AddWithValue("@Term_Code", Term_Code)
        Dim DS As DataSet = RunQuery(command)
        If DS.Tables(0).Rows.Count = 0 Then Return ""
        Get_Xlst = DS.Tables(0).Rows(0).Item("subject") + " " +
DS.Tables(0).Rows(0).Item("course_number")
        For I = 1 To DS.Tables(0).Rows.Count - 1
            Get_Xlst = Get_Xlst + "<br />" +
DS.Tables(0).Rows(I).Item("subject") + " " +
DS.Tables(0).Rows(I).Item("course_number")
        Next
        Return Get_Xlst
    End Function
    Public Shared Function InstructorNameFromCRNandTerm(CRN As Integer,
Term_Code As Integer) As ArrayList
        Dim command As New SqlCommand("Select instructor FROM
dbo.Registration_Courses where (crn = @crn) and (Term_Code = @Term_Code)")
        command.Parameters.AddWithValue("@crn", CRN)
        command.Parameters.AddWithValue("@Term_Code", Term_Code)
        Dim DS As DataSet = RunQuery(command)
        If DS.Tables(0).Rows.Count = 0 Then
            InstructorNameFromCRNandTerm = New ArrayList
            InstructorNameFromCRNandTerm.Add("")
        Else
            InstructorNameFromCRNandTerm =
NamesArray(DS.Tables(0).Rows(0).Item("instructor"))
        End If
    End Function
    Public Shared Function InstructorNameFromCRN(CRN As Integer) As
ArrayList
        Dim command As New SqlCommand("Select instructor FROM
dbo.Registration_Courses where (crn = @crn) group by instructor")
        command.Parameters.AddWithValue("@crn", CRN)
        Dim DS As DataSet = RunQuery(command)
        If DS.Tables(0).Rows.Count = 0 Then
            InstructorNameFromCRN = New ArrayList
            InstructorNameFromCRN.Add("")
        Else
            InstructorNameFromCRN =
NamesArray(DS.Tables(0).Rows(0).Item("instructor"))
        End If
    End Function
    Public Shared Function LastName(name As String) As String
        Dim Comma As Integer = InStr(name, ",")
        If Comma = 0 Then Comma = 15 'max last name of 15 characters
        LastName = Left(name, Comma - 1)
    End Function
    Public Shared Function MakeCRNUrl(CRN As Integer, TERM As Integer) As
String
        'MakeCRNUrl = "<a href='./evals.aspx?H=" + CRN.ToString() + "'
target='eval'>" + CRN.ToString() + "</a>"
        'MakeCRNUrl = "<a href='./evals.aspx?H=" + CRN.ToString() + "'
target='eval'>" + CRN.ToString() + "</a>"
        MakeCRNUrl = "<span style='color:Blue;'><a onclick='DoCrnClick(" +
CRN.ToString() + "," + TERM.ToString() + ")'>" + CRN.ToString() +
"</a></span>"
    End Function
    Public Shared Function MakeInstructorUrl(Instructor As String, CRN As
Integer, TERM As Integer) As String
        'MakeCRNUrl = "<a href='./evals.aspx?H=" + CRN.ToString() + "'
target='eval'>" + CRN.ToString() + "</a>"
        'MakeCRNUrl = "<a href='./evals.aspx?H=" + CRN.ToString() + "'
target='eval'>" + CRN.ToString() + "</a>"
        MakeInstructorUrl = "<span style='color:Blue;'><a
onclick='DoInstructorClick(" + Chr(34) + Instructor + Chr(34) + "," +
CRN.ToString() + "," + TERM.ToString() + ")'>" + LastName(Instructor) +
"</a></span>"
    End Function
    Public Shared Function MaxTermCode() As Integer
        Dim DS As DataSet = GetDS("Select MAX(Term_Code) as Max_Term_Code
FROM dbo.Registration_Courses;")
        If DS.Tables(0).Rows.Count = 0 Then Return 0
        Return DS.Tables(0).Rows(0).Item("Max_Term_Code")
    End Function
    Public Shared Function MeetingDaysConverted(meetingdays As String) As
String
        Dim mdc As New StringBuilder()
        Dim hasComma As Integer = InStr(meetingdays, ",")
        Dim meetingdays1 As String = IIf(hasComma = 0, meetingdays,
Left(meetingdays, hasComma))
        Dim meetingdays2 As String = ""
        If hasComma > 0 Then meetingdays2 = Mid(meetingdays, hasComma)
        mdc.Append(IIf((InStr(meetingdays, "M") <> 0), "M", "."))
        mdc.Append(IIf((InStr(meetingdays, "T") <> 0), "T", "."))
        mdc.Append(IIf((InStr(meetingdays, "W") <> 0), "W", "."))
        mdc.Append(IIf((InStr(meetingdays, "R") <> 0), "R", "."))
        mdc.Append(IIf((InStr(meetingdays, "F") <> 0), "F", "."))
        mdc.Append(IIf((InStr(meetingdays, "U") <> 0), "U", ""))
        If hasComma = -10 Then
            mdc.Append(", ")
            mdc.Append(IIf((InStr(meetingdays2, "M") <> 0), "M", "."))
            mdc.Append(IIf((InStr(meetingdays2, "T") <> 0), "T", "."))
            mdc.Append(IIf((InStr(meetingdays2, "W") <> 0), "W", "."))
            mdc.Append(IIf((InStr(meetingdays2, "R") <> 0), "R", "."))
            mdc.Append(IIf((InStr(meetingdays2, "F") <> 0), "F", "."))
            mdc.Append(IIf((InStr(meetingdays2, "U") <> 0), "U", ""))
        End If
        Return mdc.ToString()
    End Function
    Public Shared Function NamesArray(names As String) As ArrayList
        NamesArray = New ArrayList
        Dim SemiColon As Integer
        Do While names.Length > 0
            SemiColon = InStr(names, ";")
            If SemiColon > 0 Then
                NamesArray.Add(Left(names, SemiColon - 1))
                names = Mid(names, SemiColon + 2)
            Else
                NamesArray.Add(names)
                names = ""
            End If
        Loop
    End Function
    Public Shared Function NotNullBoolean(ByVal InputString As Object) As
Boolean
        If IsDBNull(InputString) Then
            NotNullBoolean = False
        Else
            NotNullBoolean = CType(InputString, Boolean)
        End If
    End Function ' Returns Val(inputString), -1 if DBNull
    Public Shared Function NotNull(ByVal InputString As Object) As String
        If IsDBNull(InputString) Then
            NotNull = ""
        Else
            NotNull = InputString
        End If
    End Function 'Standard null to blank string or else the string utility
function.
    Public Shared Function NotNullInt(ByVal InputString As Object) As
Integer
        If IsDBNull(InputString) Then
            NotNullInt = -1
        Else
            NotNullInt = Val(InputString)
        End If
    End Function ' Returns Val(inputString), -1 if DBNull
    Public Shared Function NotNullIntBlank(ByVal InputString As Object) As
String
        If IsDBNull(InputString) Then
            NotNullIntBlank = ""
        ElseIf Val(InputString) <= 0 Then
            NotNullIntBlank = ""
        Else
            NotNullIntBlank = Val(InputString)
        End If
    End Function ' Returns Val(inputString), -1 if DBNull
    Public Shared Function PreCoReq(pre_requisites As String, co_requicites
As String) As String
        If co_requicites = "" Then Return pre_requisites
        If pre_requisites = "" Then
            Return "CoReq: " + co_requicites
        Else
            Return "PreReq: " + pre_requisites + " CoReq: " + co_requicites
        End If
    End Function
    Public Shared Sub RecordRegistrationVisit(ByVal WebApp As String,
IPAddress As String, AuthorizedUser As String)
        If LCase(Right(AuthorizedUser, 6)) = "cutler" Then Return 'don't log
cutler or scottcutler
        Dim RecordVisitDS As New DataSet()
        Dim RecordVisitAdpt As New SqlDataAdapter()
        Dim ConnStr As String =
System.Configuration.ConfigurationManager.ConnectionStrings("COMP446_Connect
ionString").ConnectionString
        Dim strSQL As StringBuilder
        strSQL = New StringBuilder()
        strSQL.Append("SELECT Time, IP_Address, WebApp, AuthorizedUser")
        strSQL.Append(" FROM dbo.Advising_Usage")
        strSQL.Append(" WHERE WebApp=N'foo' ")
        Dim RecordVisitConn As New SqlConnection(ConnStr)
        RecordVisitAdpt.SelectCommand = New SqlCommand(strSQL.ToString(),
RecordVisitConn)
        Dim RecordVisitCB As New SqlCommandBuilder(RecordVisitAdpt)
        Try
            RecordVisitAdpt.Fill(RecordVisitDS)
            Dim VisitRow As DataRow
            VisitRow = RecordVisitDS.Tables(0).NewRow
            VisitRow.Item("Time") = Now()
            VisitRow.Item("IP_Address") = IPAddress
            VisitRow.Item("WebApp") = WebApp
            VisitRow.Item("AuthorizedUser") = AuthorizedUser
            RecordVisitDS.Tables(0).Rows.Add(VisitRow)
            RecordVisitAdpt.Update(RecordVisitDS)
            RecordVisitAdpt.Dispose()
            RecordVisitConn.Close()

        Catch e As Exception
        End Try
    End Sub 'Drop turd in Advising_Usage table
    Public Shared Function ReplaceAuthority(Url As String, oldAuthority As
String, newAuthroity As String) As String
        ReplaceAuthority = newAuthroity + Mid(Url, Len(oldAuthority) + 1)
    End Function
    Public Shared Function RunQuery(ByVal sqlQuery As SqlCommand) As DataSet
        RunQuery = New DataSet() 'Create a new DataSet to hold the records.
        Dim dbConnection As New
SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("C
OMP446_ConnectionString").ConnectionString)
        Dim dbAdapter As New SqlDataAdapter
        dbAdapter.SelectCommand = sqlQuery
        sqlQuery.Connection = dbConnection
        dbAdapter.Fill(RunQuery)
        dbAdapter.Dispose()
        dbConnection.Close()
    End Function 'Returns a DataSet from SqlCommand
    Public Shared Function TruncElipse(ByVal InputString As String, ByVal
TruncatedLength As Integer) As String
        If Len(InputString) > (TruncatedLength - 4) Then
            TruncElipse = Left(InputString, TruncatedLength - 4) + " ..."
        Else
            TruncElipse = InputString
        End If
    End Function
    Public Shared Function UserInfoRow(DS As DataSet, NetID As String,
Term_Code As Integer) As DataRow
        UserInfoRow = DS.Tables(0).NewRow
        UserInfoRow.Item("NetID") = NetID
        UserInfoRow.Item("Term_Code") = Term_Code
        UserInfoRow.Item("Active") = False
        UserInfoRow.Item("Publish") = False
        Try
            Dim URL As New StringBuilder
 
URL.Append("http://iphone.rice.edu/people/default.svc/search?keywords=")
            URL.Append(NetID)
            Dim sInfo As String
            sInfo = GetHtmlPage(URL.ToString)
            Dim o As JObject = JObject.Parse(sInfo)
            For i As Integer = 0 To o.SelectToken("d").Count - 1
                If o.SelectToken("d(" + i.ToString + ").NetID") = NetID Then
                    UserInfoRow.Item("Active") = IIf(o.SelectToken("d(" +
i.ToString + ").Active"), True, False)
                    UserInfoRow.Item("Address") = Left(o.SelectToken("d(" +
i.ToString + ").Address"), 100)
                    UserInfoRow.Item("Affiliation") =
Left(o.SelectToken("d(" + i.ToString + ").Affiliation"), 50)
                    UserInfoRow.Item("College") = Left(o.SelectToken("d(" +
i.ToString + ").College"), 50)
                    UserInfoRow.Item("Department") = Left(o.SelectToken("d("
+ i.ToString + ").Department"), 50)
                    UserInfoRow.Item("DetailID") = Left(o.SelectToken("d(" +
i.ToString + ").DetailID"), 50)
                    UserInfoRow.Item("Division") = Left(o.SelectToken("d(" +
i.ToString + ").Division"), 50)
                    UserInfoRow.Item("Email") = Left(o.SelectToken("d(" +
i.ToString + ").Email"), 50)
                    UserInfoRow.Item("Firstname") = Left(o.SelectToken("d("
+ i.ToString + ").Firstname"), 50)
                    UserInfoRow.Item("HomePhone") = Left(o.SelectToken("d("
+ i.ToString + ").HomePhone"), 50)
                    UserInfoRow.Item("Homepage") = Left(o.SelectToken("d(" +
i.ToString + ").Homepage"), 50)
                    UserInfoRow.Item("ID") = Left(o.SelectToken("d(" +
i.ToString + ").ID"), 50)
                    UserInfoRow.Item("IM") = Left(o.SelectToken("d(" +
i.ToString + ").IM"), 50)
                    UserInfoRow.Item("LastName") = Left(o.SelectToken("d(" +
i.ToString + ").Lastname"), 50)
                    UserInfoRow.Item("Major") = Left(o.SelectToken("d(" +
i.ToString + ").Major"), 50)
                    UserInfoRow.Item("Matric") = Left(o.SelectToken("d(" +
i.ToString + ").Matric"), 50)
                    UserInfoRow.Item("Middlename") = Left(o.SelectToken("d("
+ i.ToString + ").Middlename"), 50)
                    UserInfoRow.Item("MobilePhone") =
Left(o.SelectToken("d(" + i.ToString + ").MobilePhone"), 50)
                    UserInfoRow.Item("Name") = Left(o.SelectToken("d(" +
i.ToString + ").Name"), 50)
                    UserInfoRow.Item("Office") = Left(o.SelectToken("d(" +
i.ToString + ").Office"), 50)
                    UserInfoRow.Item("Phone") = Left(o.SelectToken("d(" +
i.ToString + ").Phone"), 50)
                    UserInfoRow.Item("Prefix") = Left(o.SelectToken("d(" +
i.ToString + ").Prefix"), 50)
                    UserInfoRow.Item("Publish") = IIf(o.SelectToken("d(" +
i.ToString + ").Publish"), True, False)
                    UserInfoRow.Item("Suffix") = Left(o.SelectToken("d(" +
i.ToString + ").Suffix"), 50)
                    UserInfoRow.Item("Title") = Left(o.SelectToken("d(" +
i.ToString + ").Title"), 50)
                    UserInfoRow.Item("Year") = Left(o.SelectToken("d(" +
i.ToString + ").Year"), 50)
                End If
            Next
        Catch ex As Exception
        End Try
    End Function
    Public Shared Sub UserLogin(NetID As String)
        'first check UserInfo table for NetID and Current Semester.  Return
if found.
        Dim UserInfoDS As DataSet = New DataSet
        Dim sqlQuery As New SqlCommand
        Dim dbConnection As New
SqlConnection(System.Configuration.ConfigurationManager.ConnectionStrings("C
OMP446_ConnectionString").ConnectionString)
        Dim dbAdapter As New SqlDataAdapter
        sqlQuery.CommandText = "Select * from Registration_UserInfo where
Term_Code=@Term_Code and NetID=@NetID;"
        sqlQuery.Parameters.Add("@Term_Code", SqlDbType.Int)
        sqlQuery.Parameters.Add("@NetID", SqlDbType.NVarChar, 100)
        Dim Term_Code As Integer = GetCurrentTermcode()
        sqlQuery.Parameters("@Term_Code").Value = Term_Code
        sqlQuery.Parameters("@NetID").Value = NetID
        dbAdapter.SelectCommand = sqlQuery
        sqlQuery.Connection = dbConnection
        Dim CB As New SqlCommandBuilder(dbAdapter)  'This creates the insert
command

        dbAdapter.Fill(UserInfoDS)
        If UserInfoDS.Tables(0).Rows.Count = 0 Then
            'Create UserInfo record.
            Dim NewRow As DataRow = UserInfoRow(UserInfoDS, NetID,
Term_Code)
            UserInfoDS.Tables(0).Rows.Add(NewRow)
            dbAdapter.Update(UserInfoDS)
            'Then GetUserId which will check for user and if it does not
exist, create it.  Ignore result
            Dim ignore As Integer = GetUserID(NetID)
        Else
            If UserInfoDS.Tables(0).Rows(0).Item("Active") = False Then
                Dim NewRow As DataRow = UserInfoRow(UserInfoDS, NetID,
Term_Code)
                UserInfoDS.Tables(0).Rows(0).Item("Active") =
NewRow.Item("Active")
                UserInfoDS.Tables(0).Rows(0).Item("Address") =
NewRow.Item("Address")
                UserInfoDS.Tables(0).Rows(0).Item("Affiliation") =
NewRow.Item("Affiliation")
                UserInfoDS.Tables(0).Rows(0).Item("College") =
NewRow.Item("College")
                UserInfoDS.Tables(0).Rows(0).Item("Department") =
NewRow.Item("Department")
                UserInfoDS.Tables(0).Rows(0).Item("DetailID") =
NewRow.Item("DetailID")
                UserInfoDS.Tables(0).Rows(0).Item("Division") =
NewRow.Item("Division")
                UserInfoDS.Tables(0).Rows(0).Item("Email") =
NewRow.Item("Email")
                UserInfoDS.Tables(0).Rows(0).Item("Firstname") =
NewRow.Item("Firstname")
                UserInfoDS.Tables(0).Rows(0).Item("HomePhone") =
NewRow.Item("HomePhone")
                UserInfoDS.Tables(0).Rows(0).Item("Homepage") =
NewRow.Item("Homepage")
                UserInfoDS.Tables(0).Rows(0).Item("ID") = NewRow.Item("ID")
                UserInfoDS.Tables(0).Rows(0).Item("IM") = NewRow.Item("IM")
                UserInfoDS.Tables(0).Rows(0).Item("LastName") =
NewRow.Item("LastName")
                UserInfoDS.Tables(0).Rows(0).Item("Major") =
NewRow.Item("Major")
                UserInfoDS.Tables(0).Rows(0).Item("Matric") =
NewRow.Item("Matric")
                UserInfoDS.Tables(0).Rows(0).Item("Middlename") =
NewRow.Item("Middlename")
                UserInfoDS.Tables(0).Rows(0).Item("MobilePhone") =
NewRow.Item("MobilePhone")
                UserInfoDS.Tables(0).Rows(0).Item("Name") =
NewRow.Item("Name")
                UserInfoDS.Tables(0).Rows(0).Item("Office") =
NewRow.Item("Office")
                UserInfoDS.Tables(0).Rows(0).Item("Phone") =
NewRow.Item("Phone")
                UserInfoDS.Tables(0).Rows(0).Item("Prefix") =
NewRow.Item("Prefix")
                UserInfoDS.Tables(0).Rows(0).Item("Publish") =
NewRow.Item("Publish")
                UserInfoDS.Tables(0).Rows(0).Item("Suffix") =
NewRow.Item("Suffix")
                UserInfoDS.Tables(0).Rows(0).Item("Title") =
NewRow.Item("Title")
                UserInfoDS.Tables(0).Rows(0).Item("Year") =
NewRow.Item("Year")

                dbAdapter.Update(UserInfoDS)

            End If
        End If
        dbAdapter.Dispose()
        dbConnection.Close()
    End Sub
    Public Shared Function wFullness(wCur As Integer, wMax As Integer) As
System.Drawing.Color
        If wMax <= 0 Then Return Drawing.Color.Transparent 'don't divide by
0, -1 implies no waitlist
        If wCur >= wMax Then Return Drawing.Color.Pink
        If wCur * 100 / wMax >= 80 Then Return Drawing.Color.Yellow
        Return Drawing.Color.Transparent
    End Function
    Public Shared Function xFullness(xCur As Integer, xMax As Integer) As
System.Drawing.Color
        If xMax = 0 Then Return Drawing.Color.Orange 'don't divide by 0
        If xCur >= xMax Then Return Drawing.Color.Pink
        If xCur * 100 / xMax >= 80 Then Return Drawing.Color.Yellow
        Return Drawing.Color.Transparent
    End Function
    Public Shared Function StudentOrFaculty(NetID As String, Term_Code As
Integer) As Boolean
        Select Case NetID
            Case "dtenney", "jrm7", "castigr"
                Return True
        End Select
        Dim command As New SqlCommand("Select Year FROM
dbo.Registration_UserInfo where (NetID = @NetID) and (Term_Code
=@Term_Code)")
        command.Parameters.AddWithValue("@NetID", NetID)
        command.Parameters.AddWithValue("@Term_Code", Term_Code)
        Dim DS As DataSet = RunQuery(command)
        If DS.Tables(0).Rows.Count = 0 Then Return False
        Dim Status As String = NotNull(DS.Tables(0).Rows(0).Item("Year"))
        Select Case Status
            Case "Fifth Year", "Freshman", "Graduate Student", "Junior",
"Senior", "Sophomore", "Faculty"
                StudentOrFaculty = True
            Case Else
                StudentOrFaculty = False
        End Select
    End Function

End Class