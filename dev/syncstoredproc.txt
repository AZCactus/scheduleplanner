This is the synchronization stored procedure:


ALTER PROCEDURE [dbo].[Registration_Courses_Synchronize]
	
	(
	@Term_Code int = 2000
	/*@parameter2 datatype OUTPUT*/
	)
	
AS
/* First delete records not needed*/
delete from
   dbo.Registration_Courses
where
	dbo.Registration_Courses.term_code=@Term_Code
	 And
    not exists
    (select
        1
     from
        dbo.Registration_Courses_Updates
     where
        dbo.Registration_Courses_Updates.crn  = dbo.Registration_Courses.crn

         And
        dbo.Registration_Courses_Updates.Term_Code =
dbo.Registration_Courses.Term_Code 
    ) 
	
/* Next, add new records*/

insert into
    dbo.Registration_Courses
 
select
    dbo.Registration_Courses_Updates.*
from
    dbo.Registration_Courses_Updates
where
    not exists
    (select
        1
     from
        dbo.Registration_Courses
     where
        dbo.Registration_Courses.crn = dbo.Registration_Courses_Updates.crn 
         And
        dbo.Registration_Courses_Updates.Term_Code =
dbo.Registration_Courses.Term_Code 
    )

/*Finally, sync records which are different*/	 

update
    dbo.Registration_Courses
set
    subject = SourceDBTable.subject,
    course_number = SourceDBTable.course_number,
    dbo.Registration_Courses.[section] = SourceDBTable.[section],
    title = SourceDBTable.title,
    description = SourceDBTable.description,
    credit_hours = SourceDBTable.credit_hours,
    distribution_group = SourceDBTable.distribution_group,
    start_time = SourceDBTable.start_time,
    end_time = SourceDBTable.end_time,
    meeting_days = SourceDBTable.meeting_days,
    meeting_days_ddl = SourceDBTable.meeting_days_ddl,
    instructor = SourceDBTable.instructor,
    max_enrollment = SourceDBTable.max_enrollment,
    actual_enrollment = SourceDBTable.actual_enrollment,
    xlst_actual_enrollment = SourceDBTable.xlst_actual_enrollment,
    pre_requisites = SourceDBTable.pre_requisites,
    co_requisites = SourceDBTable.co_requisites,
    catalog_or_permission = SourceDBTable.catalog_or_permission,
    catalog_inst_permission = SourceDBTable.catalog_inst_permission,
    term_code = SourceDBTable.term_code,
    term_description = SourceDBTable.term_description,
    school = SourceDBTable.school,
    department = SourceDBTable.department,
    session = SourceDBTable.session,
    major_restrictions = SourceDBTable.major_restrictions,
    class_restrictions = SourceDBTable.class_restrictions,
    xlst_group = SourceDBTable.xlst_group,
    xlst_max_enrollment = SourceDBTable.xlst_max_enrollment,
    level_restrictions = SourceDBTable.level_restrictions,
    xlink_course = SourceDBTable.xlink_course,
    program_restrictions = SourceDBTable.program_restrictions,
	location = SourceDBTable.location,
	xlst_wait_capacity = SourceDBTable.xlst_wait_capacity,
	xlst_wait_count = SourceDBTable.xlst_wait_count
from
    dbo.Registration_Courses DestinationDBTable,
    (
    select
        max(TableName) as TableName, crn, subject, course_number, [section],
title, description, credit_hours, distribution_group, start_time, end_time,
meeting_days, meeting_days_ddl, instructor, max_enrollment,
actual_enrollment, xlst_actual_enrollment, pre_requisites, co_requisites,
catalog_or_permission, catalog_inst_permission, term_code, term_description,
school, department, session, major_restrictions, class_restrictions,
xlst_group, xlst_max_enrollment, level_restrictions, xlink_course,
program_restrictions, location, xlst_wait_capacity, xlst_wait_count
    from
        (
        select
            'Registration_Courses_Updates' as TableName, crn, subject,
course_number, [section], title, description, credit_hours,
distribution_group, start_time, end_time, meeting_days, meeting_days_ddl,
instructor, max_enrollment, actual_enrollment, xlst_actual_enrollment,
pre_requisites, co_requisites, catalog_or_permission,
catalog_inst_permission, term_code, term_description, school, department,
session, major_restrictions, class_restrictions, xlst_group,
xlst_max_enrollment, level_restrictions, xlink_course, program_restrictions,
location, xlst_wait_capacity, xlst_wait_count
        from
            dbo.Registration_Courses_Updates
        union all
        select
            'Registration_Courses' as TableName, crn, subject,
course_number, [section], title, description, credit_hours,
distribution_group, start_time, end_time, meeting_days, meeting_days_ddl,
instructor, max_enrollment, actual_enrollment, xlst_actual_enrollment,
pre_requisites, co_requisites, catalog_or_permission,
catalog_inst_permission, term_code, term_description, school, department,
session, major_restrictions, class_restrictions, xlst_group,
xlst_max_enrollment, level_restrictions, xlink_course, program_restrictions,
location, xlst_wait_capacity, xlst_wait_count
        from
            dbo.Registration_Courses
        ) AliasName
    group by
        crn, subject, course_number, [section], title, description,
credit_hours, distribution_group, start_time, end_time, meeting_days,
meeting_days_ddl, instructor, max_enrollment, actual_enrollment,
xlst_actual_enrollment, pre_requisites, co_requisites,
catalog_or_permission, catalog_inst_permission, term_code, term_description,
school, department, session, major_restrictions, class_restrictions,
xlst_group, xlst_max_enrollment, level_restrictions, xlink_course,
program_restrictions, location, xlst_wait_capacity, xlst_wait_count
    having
        count(*) = 1
        and max(TableName) = 'Registration_Courses_Updates'
    ) SourceDBTable
where
    SourceDBTable.crn  = DestinationDBTable.crn
     And
    SourceDBTable.Term_Code = DestinationDBTable.Term_Code 

	/* SET NOCOUNT ON */
	RETURN
